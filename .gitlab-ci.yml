stages:
  - build
  - test
  - deploy

image: docker:20.10.16
services:
  - docker:20.10.16-dind

variables:
  DOCKER_DRIVER: overlay2
  CI_REGISTRY: registry.gitlab.com
  IMAGE_VERSION: $CI_COMMIT_SHORT_SHA
  IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
  VERSIONED_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

build:
  stage: build
  only:
    - main
  script:
    - |
      echo "Logging in to GitLab Container Registry..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      echo "Building Docker image with tags: latest and $IMAGE_VERSION"
      docker build -t $IMAGE_TAG -t $VERSIONED_TAG .
      docker push $IMAGE_TAG
      docker push $VERSIONED_TAG

test:
  stage: test
  only:
    - main
  image: node:18
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  script:
    - |
      npm config set registry https://registry.npmmirror.com
      npm config set fetch-retries 5
      npm config set fetch-retry-mintimeout 2000
      npm config set fetch-retry-maxtimeout 10000
      npm ci
      npm test

deploy:
  stage: deploy
  only:
    - main
  image: node:18
  script:
    - |
      set -e
      apt-get update && apt-get install -y openssh-client
      mkdir -p ~/.ssh
      echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      printf "Host %s\n\tStrictHostKeyChecking no\n" "$SSH_HOST" > ~/.ssh/config

      scp -i ~/.ssh/id_rsa docker-compose.yml \
        "$SSH_USER@$SSH_HOST:/home/ubuntu/app/docker-compose.yml"

      ssh -i ~/.ssh/id_rsa "$SSH_USER@$SSH_HOST" <<EOF
        set -e
        cd /home/ubuntu/app

        # save current image tag for rollback
        grep -E '^ *image:' docker-compose.yml \
          | awk -F: '{print \$NF}' > last_version.txt || true

        # switch to the new version
        sed -i "s|image:.*|image: registry.gitlab.com/it-works-on-my-machine1/hello-world:${IMAGE_VERSION}|" docker-compose.yml

        docker pull registry.gitlab.com/it-works-on-my-machine1/hello-world:${IMAGE_VERSION}
        docker compose down
        docker compose up -d
      EOF

